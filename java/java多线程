# 并发

1. 伪共享 [jmh关于伪共享的基准测试](http://hg.openjdk.java.net/code-tools/jmh/file/36a2ee9a075e/jmh-samples/src/main/java/org/openjdk/jmh/samples/JMHSample_22_FalseSharing.java#l77)
2. 内存屏障
3. happens-before


## LockSupport是java中除synchronized外一切并发控制类的基础

### 效果
LockSupport.park暂停当前线程，使用场景是检查某个条件，如果不满足线程就park。
**注意**park可能会无原因的返回，所以park一般放在循环中，
例如：
```
while (!canProceed()) { ... LockSupport.park(markerObject); }

```
park的最佳实践是一般调用LockSupport.park(object),目的是标识线程阻塞在哪个对象上，这个在使用工具诊断线程的时候可以看到这个线程因为什么原因阻塞

LockSupport.unpark(thread)允许某个阻塞在park调用下的线程运行。

###文档
[java doc](https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/locks/LockSupport.html)



## AQS

###中断线程
####Thread类提供的中断方法
1. public static boolean interrupted 测试当前线程是否已经中断。线程的中断状态 由该方法清除。换句话说，如果连续两次调用该方法，则第二次调用将返回 false（在第一次调用已清除了其中断状态之后，且第二次调用检验完中断状态前，当前线程再次中断的情况除外）。
2. public boolean isInterrupted 测试线程是否已经中断。线程的中断状态不受该方法的影响。
3. public void interrupt() 中断线程。

#### 最佳实践，读《java核心技术卷2》记录
中断一个线程只是为了引起线程的注意，被中断的线程可以决定如何应对中断。某些线程很重要，以至于他们应该不理会中断，而是在抛出异常之后继续执行。但更普遍的一种方式情况是，一个线程将把中断的看作一个终止请求。这种线程的run方法遵循如下形式：
```
public void run() {
	
	try {
		while(!Thread.currentThread().isInterrupted && more work to do) {
			do more work
		}
	} catch(InterruptedException e) {
		//线程在调用sleep或wait的过程中被中断
	} finally {
		clean up
	}
}

```

如果在每次工作迭代之后都调用sleep方法，那么isInterrupted检查就不是必须的。如果在中断状态被置位时调用sleep方法，那么sleep方法会抛出InterruptedException异常。因此循环调用sleep，就要花点心思检查中断状态并捕获InterruptedException异常。这样的run方法形式如下:
```
public void run() {
	
	try {
		while(more work do to) {
			do more work
			Thread.sleep(delay);
		}
	} catch(InterruptedException) {
		//线程在调用sleep或wait的过程中被中断
	} finally {
		clean up
	}
}

```
注意当sleep方法抛出InterruptedException异常的时，它同时也会清除中断状态。
你会在很多发布的代码中发现InterruptedException异常被抑制在了一个很低的层次上，就像这样：
```
void muTask {
	try {
		sleep(delay);
	} catch(InterruptedException) {}//什么也不做
}
```
不要这样做！如果你不能很好的在catch语句中处理异常，那么你还有两个合理的选择：
1. 在catch语句中调用Thread.currentThread().interrupt()来设置中断状态。然后调用者就可以对其进行测试：
```
void muTask {
	try {
		sleep(delay);
	} catch(InterruptedException) {
		Thread.currentThread().interrupt()
	}
}
```
2. 或者，更好的选择是标记你的方法将抛出InterruptedException异常。

#### 注意事项
线程协调方法分两大类
1. 抛出InterruptedException异常的方法一般都会清楚中断状态。如sleep
2. 不抛出InterruptedException异常的方法，在中断发生时一般会返回，但是会保留中断状态标志位，这时候调用isInterrupted会返回true